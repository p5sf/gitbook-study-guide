{"./":{"url":"./","title":"入门","keywords":"","body":"入门 配置环境 Node 版本v10.22.0以下，否则构建不成功 # 全局安装GitBook npm install gitbook-cli -g 安装插件并启动 $ gitbook install $ gitbook serve 至此、可以用浏览器访问https://localhost:4000 查看书籍或者查看我的网上地址 本主题 lou 参考文档 项目安装 项目配置 项目发布 "},"install.html":{"url":"install.html","title":"安装","keywords":"","body":"安装 环境 [!Note] 要求Node版本v10.22以下，否则构建不成功，可到 Node.js 下载并安装最新版本。 全局安装GitBook npm install gitbook-cli -g 查看是否安装成功 gitbook --version 初始化命令：创建文章 $ gitbook init 项目运行：本地启动服务 $ gitbook serve 至此、可以用浏览器访问https://localhost:4000 查看书籍详情，如下图 "},"setting.html":{"url":"setting.html","title":"配置","keywords":"","body":"项目配置 基本信息 创建配置文件并名为book.json，然后编译书籍 { \"author\": \"gitbook\", \"title\": \" GitBook init\", \"description\": \"This is a book created by gitbook\", \"extension\": null, \"generator\": \"site\", \"links\": { \"sidebar\": { \"Gitbook Blog\": \"http://www.gitbook.cn\" } }, \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" }, \"plugins\": [], \"pluginsConfig\":{} } 编译书籍 $ gitbook server 插件配置 通过 plugins 安装或删除(删除GitBook默认插件)，- 符号代表去除默认自带的插件，如下图 \"plugins\": [ \"highlight\", \"-search\", \"back-to-top-button\", \"tbfed-pagefooter\", \"github\", ] Gitbook默认7个插件 livereload 热加载插件 highlight 语法高亮插件 search 搜索插件 lunr 搜索插件后台服务 sharing 分享插件 fontsettings 字体设置插件 theme-default 主题 安装其他插件，方法一，直接在配置文件安装相应的插件，方法二：通过 npm 安装 gitbook install npm install gitbook-plugin-xxx 插件配置 [!Note] 安装一些插件之后，可能需要配置内容，例如配置页脚内容、Github \"plugins\": [ \"tbfed-pagefooter\", \"github\", ] \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy mine 2000-2020\", \"modify_label\": \"文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"github\": { \"url\": \"https://github.com/zhangjikai\" }, } 修改配置文件后，需要重新安装插件 $ gitbook install 主题安装 添加lou主题插件，并重新安装 { \"plugins\": [\"theme-lou\"], \"pluginsConfig\": { \"theme-lou\": { \"color\": \"#FF4848\", // 主题色 \"favicon\": \"static/favicon.ico\", // favicon图标 \"logo\": \"static/logo.png\", // 顶部左侧图标 \"appleTouchIconPrecomposed152\": \"static/apple.png\", // apple图标 \"copyrightLogo\": \"assets/copyright.png\", // 底部水印LOGO \"forbidCopy\": true, // 页面是否禁止复制 \"search-placeholder\": \"Input Keywords to Search\", // 搜索框默认文本 \"book-summary-title\": \"Article Directory\", // 目录标题 \"book-anchor-title\": \"Search In the Article\", // 本章目录标题 \"hide-elements\": [\".summary .gitbook-link\", \".summary .divider\"], // 需要隐藏的标签 \"copyright\": { \"author\": \"松露老师\" // 底部版权展示的作者名 } } }, } 重新运行 $ gitbook serve 主题如下图 插件大全 [!Note] 记录一些常用的插件，每次安装插件都需要重新安装 gitbook install 参考如下： Gitbook 插件使用教程 "},"deploy.html":{"url":"deploy.html","title":"发布","keywords":"","body":"项目发布 [!Tip] 上述只能在本地运行，需要发布到Github pages用来托管静态网页 文档打包 命令结束后，，在项目下生成_book文件夹，这就是最终项目。 在此文件夹里有index.html文件，这个就是网页入口，把_book文件夹复制到服务器，即可完成文档网站的部署 $ gitbook build 项目提交 [!NOTE] 由于gitbook生成的项目，文档和源码是两个部分，所以可以把文档放在master分支上，部署的网页放在gh-pages分支上 创建Github项目： gitbook-study-guide 上传项目文档 $ git add * $ git commit -m \"Ignore some files\" $ git branch -M master $ git remote add origin git@github.com:p5sf/gitbook-study-guide.git $ git push -u origin master 上传项目的源代码:将_book下的编译代码绑定到 gh-pages 上，自动推送 git subtree push --prefix=_book origin gh-pages git subtree split --prefix=public -b gh-pages 自动发布 [!tip] 每次都需要手动推送，非常麻烦，为了简单化可以写个脚本命令，自动化发布网页 先通过安装gh-pages 插件 $ npm i -D gh-pages 修改脚本文件 \"scripts\": { \"deploy\": \"gh-pages -d build\" }, 添加脚本文件 deploy.sh、并执行文件，如果看到gh-pages分支上有index.html文件，说明部署成功 #!/usr/bin/env sh echo '开启自动化' echo '执行命令：gitbook build .' gitbook build . echo \"进入编译：cd ./_book\\n\" cd ./_book echo \"初始化仓库\\n\" git init echo \"添加所有文件\\n\" git add -A echo \"项目提交\\n\" git commit -m 'deploy' echo \"项目发布\" git push -f https://github.com/yulilong/book.git master:gh-pages echo \"回到上次工作目录\" cd - "}}